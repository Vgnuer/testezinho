const { Sequelize } = require("sequelize");
require("dotenv").config();

const dbUrl = "mysql://root:hhFqazJCMYAIkiqxEhkfIpFDgpQUMXYd@interchange.proxy.rlwy.net:14848/railway";

// Debug: log das vari√°veis de ambiente usadas na conex√£o
console.log('DB_URL:', dbUrl);

const sequelize = new Sequelize(dbUrl, {
  dialect: "mysql",
  logging: false,
  
  // Configura√ß√µes de pool para melhor gerenciamento de conex√µes
  pool: {
    max: 5,
    min: 0,
    acquire: 30000,
    idle: 10000
  },
  
  // Configura√ß√µes de timeout
  dialectOptions: {
    // Remove invalid options
    connectTimeout: 60000,
    ssl: {
      require: true,
      rejectUnauthorized: false
    }
  },
  
  define: {
    timestamps: true
  },
  
  // Retry autom√°tico
  retry: {
    max: 3
  }
});

// Debug: log das configura√ß√µes de conex√£o
console.log('Tentando conectar ao banco com as seguintes configura√ß√µes:');
console.log('Host:', sequelize.options.host);
console.log('Database:', sequelize.options.database);
console.log('Username:', sequelize.options.username);
console.log('Dialect:', sequelize.options.dialect);

// Fun√ß√£o para testar a conex√£o com retry
async function connectWithRetry(retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      console.log(`Tentativa ${i + 1} de conex√£o com o banco...`);
      await sequelize.authenticate();
      console.log('‚úÖ Conex√£o com banco de dados estabelecida com sucesso!');
      
      // N√ÉO sincronizar automaticamente - o schema j√° existe
      // await sequelize.sync({ alter: true });
      console.log('‚úÖ Usando schema existente do banco!');
      return;
      
    } catch (error) {
      console.error(`‚ùå Erro na tentativa ${i + 1}:`, error.message);
      console.error('Detalhes do erro:', error);
      
      if (i === retries - 1) {
        console.error('üö® Todas as tentativas de conex√£o falharam!');
        console.error('Verifique:');
        console.error('1. Se as vari√°veis de ambiente est√£o corretas');
        console.error('2. Se o banco de dados est√° acess√≠vel');
        console.error('3. Se as credenciais est√£o v√°lidas');
        console.error('4. Se o firewall permite a conex√£o');
        throw error;
      }
      
      // Aguardar antes da pr√≥xima tentativa
      const delay = Math.pow(2, i) * 1000; // Exponential backoff
      console.log(`‚è≥ Aguardando ${delay}ms antes da pr√≥xima tentativa...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
}

// Iniciar conex√£o
connectWithRetry().catch(err => {
  console.error('üí• Falha cr√≠tica na conex√£o:', err);
  process.exit(1);
});

module.exports = sequelize;